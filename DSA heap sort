import java.util.ArrayList;
import java.util.List;

public class PowerOfTwoMaxHeap {
    private final int childrenCount;
    private final List<Integer> heap;

    public PowerOfTwoMaxHeap(int exponent) {
        if (exponent < 0) {
            throw new IllegalArgumentException("Exponent must be non-negative.");
        }
        this.childrenCount = (int) Math.pow(2, exponent);
        this.heap = new ArrayList<>();
    }

    public void insert(int value) {
        heap.add(value);
        siftUp(heap.size() - 1);
    }

    public int popMax() {
        if (heap.isEmpty()) {
            throw new IllegalStateException("Heap is empty.");
        }

        int maxValue = heap.get(0);
        int lastValue = heap.remove(heap.size() - 1);

        if (!heap.isEmpty()) {
            heap.set(0, lastValue);
            siftDown(0);
        }

        return maxValue;
    }

    private void siftUp(int index) {
        while (index > 0) {
            int parentIndex = (index - 1) / childrenCount;
            if (heap.get(index) > heap.get(parentIndex)) {
                swap(index, parentIndex);
                index = parentIndex;
            } else {
                break;
            }
        }
    }

    private void siftDown(int index) {
        int size = heap.size();
        while (true) {
            int maxIndex = index;
            for (int i = 1; i <= childrenCount; i++) {
                int childIndex = childrenCount * index + i;
                if (childIndex < size && heap.get(childIndex) > heap.get(maxIndex)) {
                    maxIndex = childIndex;
                }
            }
            if (maxIndex == index) {
                break;
            }
            swap(index, maxIndex);
            index = maxIndex;
        }
    }

    private void swap(int i, int j) {
        int temp = heap.get(i);
        heap.set(i, heap.get(j));
        heap.set(j, temp);
    }

    public static void main(String[] args) {
        PowerOfTwoMaxHeap heap = new PowerOfTwoMaxHeap(1); // Binary Heap
        heap.insert(10);
        heap.insert(20);
        heap.insert(5);
        heap.insert(6);
        heap.insert(1);
        heap.insert(8);
        heap.insert(9);

        System.out.println("Max element: " + heap.popMax()); // Should print 20
        System.out.println("Max element: " + heap.popMax()); // Should print 10

        PowerOfTwoMaxHeap largerHeap = new PowerOfTwoMaxHeap(3); // 8-ary Heap
        largerHeap.insert(30);
        largerHeap.insert(40);
        largerHeap.insert(50);
        largerHeap.insert(60);
        largerHeap.insert(70);
        largerHeap.insert(80);
        largerHeap.insert(90);

        System.out.println("Max element: " + largerHeap.popMax()); // Should print 90
        System.out.println("Max element: " + largerHeap.popMax()); // Should print 80
    }
}
